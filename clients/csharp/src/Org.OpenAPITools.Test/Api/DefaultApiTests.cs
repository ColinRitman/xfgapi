/*
 * Elderfire API Gateway
 *
 * REST API over Fuego Wallet RPC
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing DefaultApi
    /// </summary>
    public sealed class DefaultApiTests : ApiTestsBase
    {
        private readonly IDefaultApi _instance;

        public DefaultApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<IDefaultApi>();
        }

        /// <summary>
        /// Test HealthGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task HealthGetAsyncTest()
        {
            await _instance.HealthGetAsync();
        }

        /// <summary>
        /// Test NodeBlockHeaderByHeightHeightGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task NodeBlockHeaderByHeightHeightGetAsyncTest()
        {
            int height = default!;
            await _instance.NodeBlockHeaderByHeightHeightGetAsync(height);
        }

        /// <summary>
        /// Test NodeBlockcountGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task NodeBlockcountGetAsyncTest()
        {
            await _instance.NodeBlockcountGetAsync();
        }

        /// <summary>
        /// Test NodeHeightGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task NodeHeightGetAsyncTest()
        {
            await _instance.NodeHeightGetAsync();
        }

        /// <summary>
        /// Test NodeInfoGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task NodeInfoGetAsyncTest()
        {
            await _instance.NodeInfoGetAsync();
        }

        /// <summary>
        /// Test NodeLastBlockHeaderGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task NodeLastBlockHeaderGetAsyncTest()
        {
            await _instance.NodeLastBlockHeaderGetAsync();
        }

        /// <summary>
        /// Test WalletBalanceGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task WalletBalanceGetAsyncTest()
        {
            await _instance.WalletBalanceGetAsync();
        }

        /// <summary>
        /// Test WalletHeightGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task WalletHeightGetAsyncTest()
        {
            await _instance.WalletHeightGetAsync();
        }

        /// <summary>
        /// Test WalletOptimizePost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task WalletOptimizePostAsyncTest()
        {
            Client.Option<Object> body = default!;
            await _instance.WalletOptimizePostAsync(body);
        }

        /// <summary>
        /// Test WalletTransferPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task WalletTransferPostAsyncTest()
        {
            WalletTransferPostRequest walletTransferPostRequest = default!;
            await _instance.WalletTransferPostAsync(walletTransferPostRequest);
        }

        /// <summary>
        /// Test WalletTransfersPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task WalletTransfersPostAsyncTest()
        {
            Client.Option<Object> body = default!;
            await _instance.WalletTransfersPostAsync(body);
        }
    }
}
