// <auto-generated>
/*
 * Elderfire API Gateway
 *
 * REST API over Fuego Wallet RPC
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// WalletTransferPostRequest
    /// </summary>
    public partial class WalletTransferPostRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WalletTransferPostRequest" /> class.
        /// </summary>
        /// <param name="destinations">destinations</param>
        /// <param name="paymentId">paymentId</param>
        /// <param name="mixin">mixin</param>
        /// <param name="unlockTime">unlockTime</param>
        /// <param name="messages">messages</param>
        /// <param name="ttl">ttl</param>
        [JsonConstructor]
        public WalletTransferPostRequest(Option<List<WalletTransferPostRequestDestinationsInner>?> destinations = default, Option<string?> paymentId = default, Option<int?> mixin = default, Option<int?> unlockTime = default, Option<List<WalletTransferPostRequestMessagesInner>?> messages = default, Option<int?> ttl = default)
        {
            DestinationsOption = destinations;
            PaymentIdOption = paymentId;
            MixinOption = mixin;
            UnlockTimeOption = unlockTime;
            MessagesOption = messages;
            TtlOption = ttl;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Destinations
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<WalletTransferPostRequestDestinationsInner>?> DestinationsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Destinations
        /// </summary>
        [JsonPropertyName("destinations")]
        public List<WalletTransferPostRequestDestinationsInner>? Destinations { get { return this.DestinationsOption; } set { this.DestinationsOption = new(value); } }

        /// <summary>
        /// Used to track the state of PaymentId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PaymentIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets PaymentId
        /// </summary>
        [JsonPropertyName("payment_id")]
        public string? PaymentId { get { return this.PaymentIdOption; } set { this.PaymentIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Mixin
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> MixinOption { get; private set; }

        /// <summary>
        /// Gets or Sets Mixin
        /// </summary>
        [JsonPropertyName("mixin")]
        public int? Mixin { get { return this.MixinOption; } set { this.MixinOption = new(value); } }

        /// <summary>
        /// Used to track the state of UnlockTime
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> UnlockTimeOption { get; private set; }

        /// <summary>
        /// Gets or Sets UnlockTime
        /// </summary>
        [JsonPropertyName("unlock_time")]
        public int? UnlockTime { get { return this.UnlockTimeOption; } set { this.UnlockTimeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Messages
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<WalletTransferPostRequestMessagesInner>?> MessagesOption { get; private set; }

        /// <summary>
        /// Gets or Sets Messages
        /// </summary>
        [JsonPropertyName("messages")]
        public List<WalletTransferPostRequestMessagesInner>? Messages { get { return this.MessagesOption; } set { this.MessagesOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ttl
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> TtlOption { get; private set; }

        /// <summary>
        /// Gets or Sets Ttl
        /// </summary>
        [JsonPropertyName("ttl")]
        public int? Ttl { get { return this.TtlOption; } set { this.TtlOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WalletTransferPostRequest {\n");
            sb.Append("  Destinations: ").Append(Destinations).Append("\n");
            sb.Append("  PaymentId: ").Append(PaymentId).Append("\n");
            sb.Append("  Mixin: ").Append(Mixin).Append("\n");
            sb.Append("  UnlockTime: ").Append(UnlockTime).Append("\n");
            sb.Append("  Messages: ").Append(Messages).Append("\n");
            sb.Append("  Ttl: ").Append(Ttl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="WalletTransferPostRequest" />
    /// </summary>
    public class WalletTransferPostRequestJsonConverter : JsonConverter<WalletTransferPostRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="WalletTransferPostRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override WalletTransferPostRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<WalletTransferPostRequestDestinationsInner>?> destinations = default;
            Option<string?> paymentId = default;
            Option<int?> mixin = default;
            Option<int?> unlockTime = default;
            Option<List<WalletTransferPostRequestMessagesInner>?> messages = default;
            Option<int?> ttl = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "destinations":
                            destinations = new Option<List<WalletTransferPostRequestDestinationsInner>?>(JsonSerializer.Deserialize<List<WalletTransferPostRequestDestinationsInner>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "payment_id":
                            paymentId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "mixin":
                            mixin = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "unlock_time":
                            unlockTime = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "messages":
                            messages = new Option<List<WalletTransferPostRequestMessagesInner>?>(JsonSerializer.Deserialize<List<WalletTransferPostRequestMessagesInner>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "ttl":
                            ttl = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (destinations.IsSet && destinations.Value == null)
                throw new ArgumentNullException(nameof(destinations), "Property is not nullable for class WalletTransferPostRequest.");

            if (paymentId.IsSet && paymentId.Value == null)
                throw new ArgumentNullException(nameof(paymentId), "Property is not nullable for class WalletTransferPostRequest.");

            if (mixin.IsSet && mixin.Value == null)
                throw new ArgumentNullException(nameof(mixin), "Property is not nullable for class WalletTransferPostRequest.");

            if (unlockTime.IsSet && unlockTime.Value == null)
                throw new ArgumentNullException(nameof(unlockTime), "Property is not nullable for class WalletTransferPostRequest.");

            if (messages.IsSet && messages.Value == null)
                throw new ArgumentNullException(nameof(messages), "Property is not nullable for class WalletTransferPostRequest.");

            if (ttl.IsSet && ttl.Value == null)
                throw new ArgumentNullException(nameof(ttl), "Property is not nullable for class WalletTransferPostRequest.");

            return new WalletTransferPostRequest(destinations, paymentId, mixin, unlockTime, messages, ttl);
        }

        /// <summary>
        /// Serializes a <see cref="WalletTransferPostRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="walletTransferPostRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, WalletTransferPostRequest walletTransferPostRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, walletTransferPostRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="WalletTransferPostRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="walletTransferPostRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, WalletTransferPostRequest walletTransferPostRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (walletTransferPostRequest.DestinationsOption.IsSet && walletTransferPostRequest.Destinations == null)
                throw new ArgumentNullException(nameof(walletTransferPostRequest.Destinations), "Property is required for class WalletTransferPostRequest.");

            if (walletTransferPostRequest.PaymentIdOption.IsSet && walletTransferPostRequest.PaymentId == null)
                throw new ArgumentNullException(nameof(walletTransferPostRequest.PaymentId), "Property is required for class WalletTransferPostRequest.");

            if (walletTransferPostRequest.MessagesOption.IsSet && walletTransferPostRequest.Messages == null)
                throw new ArgumentNullException(nameof(walletTransferPostRequest.Messages), "Property is required for class WalletTransferPostRequest.");

            if (walletTransferPostRequest.DestinationsOption.IsSet)
            {
                writer.WritePropertyName("destinations");
                JsonSerializer.Serialize(writer, walletTransferPostRequest.Destinations, jsonSerializerOptions);
            }
            if (walletTransferPostRequest.PaymentIdOption.IsSet)
                writer.WriteString("payment_id", walletTransferPostRequest.PaymentId);

            if (walletTransferPostRequest.MixinOption.IsSet)
                writer.WriteNumber("mixin", walletTransferPostRequest.MixinOption.Value!.Value);

            if (walletTransferPostRequest.UnlockTimeOption.IsSet)
                writer.WriteNumber("unlock_time", walletTransferPostRequest.UnlockTimeOption.Value!.Value);

            if (walletTransferPostRequest.MessagesOption.IsSet)
            {
                writer.WritePropertyName("messages");
                JsonSerializer.Serialize(writer, walletTransferPostRequest.Messages, jsonSerializerOptions);
            }
            if (walletTransferPostRequest.TtlOption.IsSet)
                writer.WriteNumber("ttl", walletTransferPostRequest.TtlOption.Value!.Value);
        }
    }
}
