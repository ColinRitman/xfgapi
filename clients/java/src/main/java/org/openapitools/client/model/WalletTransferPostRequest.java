/*
 * Elderfire API Gateway
 * REST API over Fuego Wallet RPC
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.WalletTransferPostRequestDestinationsInner;
import org.openapitools.client.model.WalletTransferPostRequestMessagesInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * WalletTransferPostRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-09T11:26:48.795596969Z[Etc/UTC]", comments = "Generator version: 7.14.0")
public class WalletTransferPostRequest {
  public static final String SERIALIZED_NAME_DESTINATIONS = "destinations";
  @SerializedName(SERIALIZED_NAME_DESTINATIONS)
  @javax.annotation.Nullable
  private List<WalletTransferPostRequestDestinationsInner> destinations = new ArrayList<>();

  public static final String SERIALIZED_NAME_PAYMENT_ID = "payment_id";
  @SerializedName(SERIALIZED_NAME_PAYMENT_ID)
  @javax.annotation.Nullable
  private String paymentId;

  public static final String SERIALIZED_NAME_MIXIN = "mixin";
  @SerializedName(SERIALIZED_NAME_MIXIN)
  @javax.annotation.Nullable
  private Integer mixin;

  public static final String SERIALIZED_NAME_UNLOCK_TIME = "unlock_time";
  @SerializedName(SERIALIZED_NAME_UNLOCK_TIME)
  @javax.annotation.Nullable
  private Integer unlockTime;

  public static final String SERIALIZED_NAME_MESSAGES = "messages";
  @SerializedName(SERIALIZED_NAME_MESSAGES)
  @javax.annotation.Nullable
  private List<WalletTransferPostRequestMessagesInner> messages = new ArrayList<>();

  public static final String SERIALIZED_NAME_TTL = "ttl";
  @SerializedName(SERIALIZED_NAME_TTL)
  @javax.annotation.Nullable
  private Integer ttl;

  public WalletTransferPostRequest() {
  }

  public WalletTransferPostRequest destinations(@javax.annotation.Nullable List<WalletTransferPostRequestDestinationsInner> destinations) {
    this.destinations = destinations;
    return this;
  }

  public WalletTransferPostRequest addDestinationsItem(WalletTransferPostRequestDestinationsInner destinationsItem) {
    if (this.destinations == null) {
      this.destinations = new ArrayList<>();
    }
    this.destinations.add(destinationsItem);
    return this;
  }

  /**
   * Get destinations
   * @return destinations
   */
  @javax.annotation.Nullable
  public List<WalletTransferPostRequestDestinationsInner> getDestinations() {
    return destinations;
  }

  public void setDestinations(@javax.annotation.Nullable List<WalletTransferPostRequestDestinationsInner> destinations) {
    this.destinations = destinations;
  }


  public WalletTransferPostRequest paymentId(@javax.annotation.Nullable String paymentId) {
    this.paymentId = paymentId;
    return this;
  }

  /**
   * Get paymentId
   * @return paymentId
   */
  @javax.annotation.Nullable
  public String getPaymentId() {
    return paymentId;
  }

  public void setPaymentId(@javax.annotation.Nullable String paymentId) {
    this.paymentId = paymentId;
  }


  public WalletTransferPostRequest mixin(@javax.annotation.Nullable Integer mixin) {
    this.mixin = mixin;
    return this;
  }

  /**
   * Get mixin
   * @return mixin
   */
  @javax.annotation.Nullable
  public Integer getMixin() {
    return mixin;
  }

  public void setMixin(@javax.annotation.Nullable Integer mixin) {
    this.mixin = mixin;
  }


  public WalletTransferPostRequest unlockTime(@javax.annotation.Nullable Integer unlockTime) {
    this.unlockTime = unlockTime;
    return this;
  }

  /**
   * Get unlockTime
   * @return unlockTime
   */
  @javax.annotation.Nullable
  public Integer getUnlockTime() {
    return unlockTime;
  }

  public void setUnlockTime(@javax.annotation.Nullable Integer unlockTime) {
    this.unlockTime = unlockTime;
  }


  public WalletTransferPostRequest messages(@javax.annotation.Nullable List<WalletTransferPostRequestMessagesInner> messages) {
    this.messages = messages;
    return this;
  }

  public WalletTransferPostRequest addMessagesItem(WalletTransferPostRequestMessagesInner messagesItem) {
    if (this.messages == null) {
      this.messages = new ArrayList<>();
    }
    this.messages.add(messagesItem);
    return this;
  }

  /**
   * Get messages
   * @return messages
   */
  @javax.annotation.Nullable
  public List<WalletTransferPostRequestMessagesInner> getMessages() {
    return messages;
  }

  public void setMessages(@javax.annotation.Nullable List<WalletTransferPostRequestMessagesInner> messages) {
    this.messages = messages;
  }


  public WalletTransferPostRequest ttl(@javax.annotation.Nullable Integer ttl) {
    this.ttl = ttl;
    return this;
  }

  /**
   * Get ttl
   * @return ttl
   */
  @javax.annotation.Nullable
  public Integer getTtl() {
    return ttl;
  }

  public void setTtl(@javax.annotation.Nullable Integer ttl) {
    this.ttl = ttl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WalletTransferPostRequest walletTransferPostRequest = (WalletTransferPostRequest) o;
    return Objects.equals(this.destinations, walletTransferPostRequest.destinations) &&
        Objects.equals(this.paymentId, walletTransferPostRequest.paymentId) &&
        Objects.equals(this.mixin, walletTransferPostRequest.mixin) &&
        Objects.equals(this.unlockTime, walletTransferPostRequest.unlockTime) &&
        Objects.equals(this.messages, walletTransferPostRequest.messages) &&
        Objects.equals(this.ttl, walletTransferPostRequest.ttl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(destinations, paymentId, mixin, unlockTime, messages, ttl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WalletTransferPostRequest {\n");
    sb.append("    destinations: ").append(toIndentedString(destinations)).append("\n");
    sb.append("    paymentId: ").append(toIndentedString(paymentId)).append("\n");
    sb.append("    mixin: ").append(toIndentedString(mixin)).append("\n");
    sb.append("    unlockTime: ").append(toIndentedString(unlockTime)).append("\n");
    sb.append("    messages: ").append(toIndentedString(messages)).append("\n");
    sb.append("    ttl: ").append(toIndentedString(ttl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("destinations", "payment_id", "mixin", "unlock_time", "messages", "ttl"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WalletTransferPostRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WalletTransferPostRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WalletTransferPostRequest is not found in the empty JSON string", WalletTransferPostRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WalletTransferPostRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WalletTransferPostRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("destinations") != null && !jsonObj.get("destinations").isJsonNull()) {
        JsonArray jsonArraydestinations = jsonObj.getAsJsonArray("destinations");
        if (jsonArraydestinations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("destinations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `destinations` to be an array in the JSON string but got `%s`", jsonObj.get("destinations").toString()));
          }

          // validate the optional field `destinations` (array)
          for (int i = 0; i < jsonArraydestinations.size(); i++) {
            WalletTransferPostRequestDestinationsInner.validateJsonElement(jsonArraydestinations.get(i));
          };
        }
      }
      if ((jsonObj.get("payment_id") != null && !jsonObj.get("payment_id").isJsonNull()) && !jsonObj.get("payment_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payment_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payment_id").toString()));
      }
      if (jsonObj.get("messages") != null && !jsonObj.get("messages").isJsonNull()) {
        JsonArray jsonArraymessages = jsonObj.getAsJsonArray("messages");
        if (jsonArraymessages != null) {
          // ensure the json data is an array
          if (!jsonObj.get("messages").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `messages` to be an array in the JSON string but got `%s`", jsonObj.get("messages").toString()));
          }

          // validate the optional field `messages` (array)
          for (int i = 0; i < jsonArraymessages.size(); i++) {
            WalletTransferPostRequestMessagesInner.validateJsonElement(jsonArraymessages.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WalletTransferPostRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WalletTransferPostRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WalletTransferPostRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WalletTransferPostRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<WalletTransferPostRequest>() {
           @Override
           public void write(JsonWriter out, WalletTransferPostRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WalletTransferPostRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WalletTransferPostRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WalletTransferPostRequest
   * @throws IOException if the JSON string is invalid with respect to WalletTransferPostRequest
   */
  public static WalletTransferPostRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WalletTransferPostRequest.class);
  }

  /**
   * Convert an instance of WalletTransferPostRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

